// Code generated by github.com/scottshotgg/configsquared; DO NOT EDIT.

// It is in your best interest NOT to edit this file as it will be removed if re-generated.

package config

import (
	"errors"
	"net"
)

type ipv4Flag struct {
	set    bool
	value  net.IP
	sValue string
}

// If flag is not provided it will not get to this function
func (i *ipv4Flag) Set(x string) error {
	// Set the string value
	i.sValue = x

	// Parse the value from the provided string
	var value = parseIPv4(i.sValue)
	if value == nil {
		// TODO: test this out
		return errors.New("invalid ip: " + x)
	}

	// Set the actual value
	i.value = value

	// Mark the flag as set
	i.set = true

	return nil
}

func (i *ipv4Flag) String() string {
	return i.sValue
}

// BELOW WAS TAKEN FROM GO STD LIB net/ip.go

// Bigger than we need, not too big to worry about overflow
const big = 0xFFFFFF

func parseIPv4(s string) net.IP {
	var p [net.IPv4len]byte
	for i := 0; i < net.IPv4len; i++ {
		if len(s) == 0 {
			// Missing octets.
			return nil
		}
		if i > 0 {
			if s[0] != '.' {
				return nil
			}
			s = s[1:]
		}
		n, c, ok := dtoi(s)
		if !ok || n > 0xFF {
			return nil
		}
		s = s[c:]
		p[i] = byte(n)
	}
	if len(s) != 0 {
		return nil
	}
	return net.IPv4(p[0], p[1], p[2], p[3])
}

// Decimal to integer.
// Returns number, characters consumed, success.
func dtoi(s string) (n int, i int, ok bool) {
	n = 0
	for i = 0; i < len(s) && '0' <= s[i] && s[i] <= '9'; i++ {
		n = n*10 + int(s[i]-'0')
		if n >= big {
			return big, i, false
		}
	}
	if i == 0 {
		return 0, 0, false
	}
	return n, i, true
}
