// Code generated by github.com/scottshotgg/configsquared; DO NOT EDIT.

// It is in your best interest NOT to edit this file as it will be removed if re-generated.

package config

import "flag"

type flags struct {
	remote  urlFlag
	idc     anyFlag
	uint32  uint32Flag
	port    stringFlag
	retries intFlag
	at      unixFlag
	int32   int32Flag
	rune    runeFlag
	timeout durationFlag
	mock    boolFlag
	when    timeFlag
	int64   int64Flag
	uint64  uint64Flag
	byte    byteFlag
}

func newFlags() *flags {
	var f flags

	flag.Var(&f.remote, "remote", "")
	flag.Var(&f.idc, "idc", "")
	flag.Var(&f.uint32, "uint32", "")
	flag.Var(&f.port, "port", "Port that the server is hosted on")
	flag.Var(&f.retries, "retries", "Set the default HTTP timeout")
	flag.Var(&f.at, "at", "")
	flag.Var(&f.int32, "int32", "")
	flag.Var(&f.rune, "rune", "")
	flag.Var(&f.timeout, "timeout", "")
	flag.Var(&f.mock, "mock", "Whether to mock the backing data storage for testing")
	flag.Var(&f.when, "when", "")
	flag.Var(&f.int64, "int64", "")
	flag.Var(&f.uint64, "uint64", "")
	flag.Var(&f.byte, "byte", "")

	// nested struct fields

	f.when.layout = "2006-01-02T15:04:05Z07:00"

	return &f
}

func (f *flags) required() {
	if !f.port.set {
		// just for now
		panic("port is a required flag")
	}
}

func (f *flags) defaults() {
	if !f.retries.set {
		var err = f.retries.Set("5")
		if err != nil {
			// _probably_ just for now
			panic(err)
		}
	}
}

func (f *flags) toConfig() Config {
	return Config{
		remote:  f.remote.value,
		idc:     f.idc.value,
		uint32:  f.uint32.value,
		port:    f.port.value,
		retries: f.retries.value,
		at:      f.at.value,
		int32:   f.int32.value,
		rune:    f.rune.value,
		timeout: f.timeout.value,
		mock:    f.mock.value,
		when:    f.when.value,
		int64:   f.int64.value,
		uint64:  f.uint64.value,
		byte:    f.byte.value,
	}
}
