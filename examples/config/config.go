// Code generated by github.com/scottshotgg/configsquared; DO NOT EDIT.

// It is in your best interest NOT to edit this file as it will be removed if re-generated.

package config

import (
	"flag"
	"net/url"
	"time"
)

type Config struct {
	when    time.Time
	idc     string
	uint64  uint64
	timeout time.Duration
	int64   int64
	uint32  uint32
	byte    byte
	port    string
	remote  url.URL
	int32   int32
	mock    bool
	retries int
	at      time.Time
	rune    rune
}

var (
	// Internal singleton config to avoid re-parse if called multiple times
	c Config
)

func (c *Config) When() time.Time {
	return c.when
}
func (c *Config) Idc() string {
	return c.idc
}
func (c *Config) Uint64() uint64 {
	return c.uint64
}
func (c *Config) Timeout() time.Duration {
	return c.timeout
}
func (c *Config) Int64() int64 {
	return c.int64
}
func (c *Config) Uint32() uint32 {
	return c.uint32
}
func (c *Config) Byte() byte {
	return c.byte
}
func (c *Config) Port() string {
	return c.port
}
func (c *Config) Remote() url.URL {
	return c.remote
}
func (c *Config) Int32() int32 {
	return c.int32
}
func (c *Config) Mock() bool {
	return c.mock
}
func (c *Config) Retries() int {
	return c.retries
}
func (c *Config) At() time.Time {
	return c.at
}
func (c *Config) Rune() rune {
	return c.rune
}

func Parse(v Validator) (*Config, error) {
	if !flag.Parsed() {
		var f = newFlags()

		flag.Parse()

		f.required()
		f.defaults()

		c = f.toConfig()

		return &c, c.validate(v)
	}

	return &c, nil
}

func (c *Config) validate(v Validator) error {
	var err error

	err = v.ValidateRetries(c.retries)
	if err != nil {
		return err
	}

	return nil
}
